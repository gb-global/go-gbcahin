// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xef\x92\xdb\x36\x92\xff\x3c\x7e\x8a\x0e\xcf\x5e\x49\x99\x21\xa9\xf9\x63\xef\x9c\x44\x2a\xe5\xf5\x66\xf7\x7c\x75\x97\xa4\x62\xa7\xee\xb6\xb2\xa9\x2b\x90\x68\x89\xf0\x80\x00\x03\x80\xd2\x28\x53\x7a\xf7\x2b\x00\x24\x45\x51\x9a\x89\x1d\xfb\xaa\xce\x1f\xc6\x24\xd0\xe8\x6e\x74\xff\x1a\xdd\x0d\x31\xf9\xea\xaf\xdf\xbf\x79\xff\x8f\x1f\xbe\x85\xc2\x94\x7c\xf1\x2c\xb1\xff\x01\x27\x62\x95\x06\x28\x82\xc5\xb3\xb3\xa4\x40\x42\x17\xcf\xce\xce\x92\x12\x0d\x81\xbc\x20\x4a\xa3\x49\x83\xda\x2c\xc3\xdb\x60\x3f\x51\x18\x53\x85\xf8\x6b\xcd\xd6\x69\xf0\xdf\xe1\x4f\xaf\xc3\x37\xb2\xac\x88\x61\x19\xc7\x00\x72\x29\x0c\x0a\x93\x06\x6f\xbf\x4d\x91\xae\xb0\xb7\x4e\x90\x12\xd3\x60\xcd\x70\x53\x49\x65\x7a\xa4\x1b\x46\x4d\x91\x52\x5c\xb3\x1c\x43\xf7\x72\x01\x4c\x30\xc3\x08\x0f\x75\x4e\x38\xa6\x97\xc1\xe2\x99\xe5\x63\x98\xe1\xb8\x78\x78\x88\xbe\x43\xb3\x91\xea\x6e\xb7\x9b\xc1\xeb\xda\x14\x28\x0c\xcb\x89\x41\x0a\x7f\x23\x75\x8e\x26\x89\x3d\xa5\x5b\xc4\x99\xb8\x83\x42\xe1\x32\x0d\xac\xea\x7a\x16\xc7\x39\x15\x1f\x74\x94\x73\x59\xd3\x25\x27\x0a\xa3\x5c\x96\x31\xf9\x40\xee\x63\xce\x32\x1d\x9b\x0d\x33\x06\x55\x98\x49\x69\xb4\x51\xa4\x8a\xaf\xa3\xeb\xe8\xcf\x71\xae\x75\xdc\x8d\x45\x25\x13\x51\xae\x75\x00\x0a\x79\x1a\x68\xb3\xe5\xa8\x0b\x44\x13\x40\xbc\xf8\x63\x72\x97\x52\x98\x90\x6c\x50\xcb\x12\xe3\x9b\xe8\xcf\xd1\xd4\x89\xec\x0f\x3f\x2d\xd5\x8a\xd5\xb9\x62\x95\x01\xad\xf2\x8f\x96\xfb\xe1\xd7\x1a\xd5\x36\xbe\x8e\x2e\xa3\xcb\xe6\xc5\xc9\xf9\xa0\x83\x45\x12\x7b\x86\x8b\xcf\xe2\x1d\x0a\x69\xb6\xf1\x55\x74\x13\x5d\xc6\x15\xc9\xef\xc8\x0a\x69\x2b\xc9\x4e\x45\xed\xe0\x17\x93\xfb\x98\x0f\x3f\x0c\x5d\xf8\x25\x84\x95\xb2\x44\x61\xa2\x0f\x3a\xbe\x8a\x2e\x6f\xa3\x69\x3b\x70\xcc\xdf\x09\xb0\x4e\xb3\xa2\xce\xa2\x35\x2a\x8b\x5c\x1e\xe6\x28\x0c\x2a\x78\xb0\xa3\x67\x25\x13\x61\x81\x6c\x55\x98\x19\x5c\x4e\xa7\x2f\xe6\xa7\x46\xd7\x85\x1f\xa6\x4c\x57\x9c\x6c\x67\xb0\xe4\x78\xef\x87\x08\x67\x2b\x11\x32\x83\xa5\x9e\x81\xe7\xec\x26\x76\x4e\x66\xa5\xe4\x4a\xa1\xd6\x8d\xb0\x4a\x6a\x66\x98\x14\x33\x8b\x28\x62\xd8\x1a\x4f\xd1\xea\x8a\x88\xa3\x05\x24\xd3\x92\xd7\x06\x07\x8a\x64\x5c\xe6\x77\x7e\xcc\x45\x73\x7f\x13\xb9\xe4\x52\xcd\x60\x53\xb0\x66\x19\x38\x41\x50\x29\x6c\xd8\x43\x45\x28\x65\x62\x35\x83\x57\x55\xb3\x1f\x28\x89\x5a\x31\x31\x83\xe9\x7e\x49\x12\xb7\x66\x4c\x62\x7f\x70\x3d\x3b\x4b\x32\x49\xb7\xce\x87\x94\xad\x21\xe7\x44\xeb\x34\x18\x98\xd8\x1d\x48\x07\x04\xf6\x1c\x22\x4c\xb4\x53\x07\x73\x4a\x6e\x02\x70\x82\xd2\xc0\x2b\x11\x66\xd2\x18\x59\xce\xe0\xd2\xaa\xd7\x2c\x19\xf0\xe3\x21\x5f\x85\x97\x57\xed\xe4\x59\x52\x5c\xb6\x4c\x0c\xde\x9b\xd0\xf9\xa7\xf3\x4c\xb0\x48\x58\xbb\x76\x49\x60\x49\xc2\x8c\x98\x22\x00\xa2\x18\x09\x0b\x46\x29\x8a\x34\x30\xaa\x46\x8b\x23\xb6\x80\xfe\xf1\xf7\xc8\xe9\x57\x5c\xb6\x7a\xc5\x94\xad\x9b\x6d\xf5\x1e\x07\x3b\x7c\x7c\x13\xb7\xd0\x3c\xc8\xe5\x52\xa3\x09\x7b\x7b\xea\x11\x33\x51\xd5\x26\x5c\x29\x59\x57\xdd\xfc\x59\xe2\x46\x81\xd1\x34\xa8\x15\x0f\x9a\xe3\xdf\x3d\x9a\x6d\xd5\x98\x22\xe8\x36\x2e\x55\x19\x5a\x4f\x28\xc9\x03\xa8\x38\xc9\xb1\x90\x9c\xa2\x4a\x83\x1f\x38\x12\x8d\xe0\x03\x64\x2b\x6b\x05\xef\x58\x59\x71\xcc\x0b\xc2\x04\x10\x4a\x2d\x40\xa3\x28\xea\x89\x76\x68\x3d\x56\x2e\xcc\x8c\xd8\x53\x9d\x25\x59\x6d\x8c\xec\x08\x33\x23\x20\x33\x22\xa4\xb8\x24\x35\x37\x40\x95\xac\xa8\xdc\x88\xd0\xc8\xd5\xca\xe6\x36\xaf\xb6\x5f\x14\x00\x25\x86\x34\x53\x69\xd0\xd2\xb6\x5e\x23\xba\x92\x55\x5d\x35\x7e\xf3\x83\x78\x5f\x11\x41\x91\x5a\x2f\x73\x8d\xc1\xe2\xef\x6c\x8d\x50\x22\xbc\x63\x55\x7e\x36\xc4\x40\x4e\x14\x9a\xb0\xcf\xf3\x08\x09\x49\xec\x75\xf1\x3b\x82\xe6\x5f\x52\xf3\x96\x53\xb7\x83\x12\x45\x0d\x07\x6f\xa1\xb2\x07\x49\xb0\x78\x78\x50\x44\xac\x10\x9e\x33\x7a\x7f\x01\xcf\x49\x29\x6b\x61\x60\x96\x42\xf4\xda\x3d\xea\xdd\xee\x80\x3b\x40\xc2\xd9\x22\x21\x4f\xe1\x19\xa4\xc8\x39\xcb\xef\xd2\xc0\x30\x54\xe9\xc3\x83\x65\xbe\xdb\xcd\xe1\xe1\x81\x2d\xe1\x79\xf4\x23\xe6\xa4\x32\x79\x41\x76\xbb\x95\x6a\x9f\x23\xbc\xc7\xbc\x36\x38\x9e\x3c\x3c\x20\xd7\xb8\xdb\xe9\x3a\x2b\x99\x19\xb7\xcb\xed\xb8\xa0\xbb\x9d\xd5\xb9\xd1\x73\xb7\x83\xd8\x32\x15\x14\xef\xe1\x79\xf4\x03\x2a\x26\xa9\x06\x4f\x9f\xc4\x64\x91\xc4\x9c\x2d\x9a\x75\x87\x46\x8a\x6b\xbe\x87\x4b\x6c\xf1\xd2\x01\xdb\xc5\x89\x53\xb5\xaf\xe9\x09\xd8\xaf\xc2\x4e\xfb\x06\x0e\x9a\x19\xbc\xc3\x6d\x1a\x3c\x3c\xf4\xd7\x36\xb3\x39\xe1\x3c\x23\xd6\x2e\x7e\x6b\xdd\xa2\xdf\xd0\xc2\x74\xcd\xb4\xab\xa1\x16\xad\x06\x7b\xb5\x3f\x32\x8e\x07\x27\x95\x91\xd5\x0c\xae\xaf\x7a\xc7\xd4\xa9\x10\x7f\x35\x08\xf1\xeb\x93\xc4\x15\x11\xc8\xc1\xfd\x0d\x75\x49\x78\xfb\xdc\x04\x4b\x2f\xf6\x86\x8b\x42\x7b\x28\x77\xaa\x75\x87\xfb\x74\x0e\x72\x8d\x6a\xc9\xe5\x66\x06\xa4\x36\x72\x0e\x25\xb9\xef\x12\xdc\xf5\x74\xda\xd7\xdb\xd6\x7e\x24\xe3\xe8\x8e\x13\x85\xbf\xd6\xa8\x8d\xee\x0e\x0f\x3f\xe5\xfe\xda\x33\x84\xa2\xd0\x48\x07\xd6\xb0\x12\xad\x69\x1d\x55\xcf\xf5\x9d\x31\x4f\xea\xbe\x94\xb2\xcb\x19\x7d\x35\x1a\xd6\xbd\xf4\x16\x2c\x12\xa3\xf6\x74\x67\x89\xa1\x9f\x74\xe6\x2b\x5b\xd3\x3d\x76\xe4\xfb\x03\xcd\xee\xbd\x42\x54\xbe\xa0\xb0\x90\x05\xf7\x9a\xc4\x86\x7e\x86\x64\x0b\xc2\x8c\x68\xfc\x18\xf1\x2e\xb5\xef\xc5\xbb\xd7\xcf\x95\x5f\x20\x51\x26\x43\x62\x3e\x46\x81\x65\x2d\x68\x6f\xff\xf6\xe8\xfc\x5c\xf9\xb5\x60\x6b\x54\x9a\x99\xed\xc7\x2a\x80\x74\xaf\x81\x7f\x3f\x54\x21\x89\x8d\x7a\x1a\x6a\xfd\x97\xe3\xd8\x7e\x78\x88\xbf\xfe\xc4\xf8\xfe\x3a\xde\xed\xba\x75\x8f\x95\x23\x87\x44\x67\x49\x71\xbd\xf8\x37\xb9\x01\x2a\x51\x83\x29\x98\x06\x5b\x54\x7c\x93\xc4\xc5\xf5\x11\x69\xb5\x78\x6f\x09\xfa\x99\x77\xe9\x8a\x0d\x60\x1a\x54\x2d\x04\x13\x2b\x90\x02\x4c\x81\x87\x05\x8a\xf0\x4f\x51\x12\x57\x47\x4c\xe9\x3e\x53\xf1\xb0\x90\x8a\xfd\x66\x4b\x31\x7e\xa4\xe8\x59\x42\xcd\x20\xe4\xda\x13\xc3\x19\x82\xe3\xd2\xcc\xe0\xc6\x9f\x18\x43\xf7\x36\x8d\xc0\x29\xdf\xb6\x3c\x5d\x83\x65\x8f\xe1\x19\x5c\xfb\xaa\xce\xa7\x57\x6a\x4e\x68\x42\x07\x5e\xf0\xc2\x6f\x6f\xab\xfb\x4e\x9f\xae\x44\x9c\x76\xcc\xe0\xbd\x84\xe6\xdc\x72\x90\xd1\xb0\x66\x04\xde\x7b\xdd\x2e\xa0\x24\x77\x08\x04\x12\x32\x68\x18\x1b\xe5\x5d\xbb\xc1\x5c\xbb\x1c\x9b\x0d\xa2\xf9\xc6\x22\x3b\xfd\xd1\x33\x64\x62\xf5\xe2\x6a\xea\xdd\x61\x1f\x2c\xfb\x17\x57\x53\x26\x8c\x7c\x71\x35\x9d\xde\x4f\x3f\xf2\xdf\x8b\xab\xa9\x14\x2f\xae\xa6\xa6\xc0\x17\x57\xd3\x17\x57\xd7\x7d\x47\xfa\x91\x6f\x4d\x81\x0a\xeb\xd2\x52\xa1\xb6\xd2\x5a\xff\x06\x60\x88\x5a\xa1\x49\x83\xff\x21\x99\xac\xcd\x2c\xe3\x44\xdc\x05\x0b\xa7\xae\xcd\xc5\xb0\x61\xa6\xf0\xf5\x5b\xcb\xa5\x2d\xde\xa0\x22\xda\x96\xaf\x56\x63\x87\xa0\xe6\x6a\x40\xc3\x58\xd7\x4a\xc9\x5a\xd8\x9c\x01\x76\xcf\x0e\xac\x62\x64\xa0\x24\xd6\x30\x93\x28\xc9\x54\xbc\x78\x23\xab\x6d\xe8\x98\xb8\xe5\x47\x66\xd4\x75\x55\x49\x65\xa2\xbe\x39\x89\x6d\x0b\x38\xea\xf8\x76\xfa\xf2\xf6\xd5\x93\xea\x6b\xf8\xe9\xc7\xff\x70\x7b\xe8\x34\x24\x99\x5c\x23\xf8\x12\x37\x93\xf7\x40\x04\x85\x25\x53\x08\x64\x43\xb6\x5f\x25\x31\xa5\x1e\x3a\x5f\x0a\xc5\x4b\x92\x63\x26\xe5\xdd\xff\x4b\x18\xff\xad\x51\xee\x02\xaa\x3a\xe3\x4c\x17\x40\x40\xe0\x06\x12\x6d\x94\x14\xab\x85\x1b\xcd\x6d\xc7\xe6\x5e\xa1\x92\xda\x3c\x05\x07\x2c\x33\xa4\xf4\x04\x20\xbe\x14\x1e\x36\x9b\x4d\xd4\x5a\xd4\x81\xa1\x40\x5e\xc5\xb9\x2c\xcb\x5a\x30\xb3\x8d\x7d\x58\x49\x11\x7f\xc3\x68\x7a\x75\x7b\xf5\xea\xd5\xd5\xcd\xbf\xde\xbe\x7c\x79\x75\x7b\xf3\xf2\x31\xa4\xd8\x4d\x7d\x21\xa0\xf8\xe2\xf3\x3b\x69\x9b\xbb\xdd\x6e\xe8\x3b\x87\xa3\xb6\xf2\xb1\x09\x8e\xda\x0a\x5e\x05\x7f\x18\x5b\xb5\xb0\x69\x3c\x24\xfc\x64\x06\xfe\x03\xe8\x72\xf0\x7a\x42\xc3\xcf\x84\x5c\x0b\x2b\x8b\x20\x59\x1b\xbb\xd3\xb6\x07\x66\x52\x74\x30\xbb\x00\x6d\xb3\xd5\x16\xf2\x3d\x1a\x4e\xe3\xed\x51\x67\xfd\x2e\xdc\x0e\xdd\xe9\xc1\xe7\x12\x65\x29\x29\xda\xd4\xa8\x6b\x9d\x63\xe5\x2e\x47\xc1\x48\xf8\xcb\xf6\x37\x22\x0c\x13\x08\xc4\x18\x92\xdf\xe9\x08\xbe\x17\x7c\x0b\xb5\x46\x58\x4a\x05\x14\xb3\x7a\xb5\x72\xb9\x54\x41\xa5\xd8\x9a\x18\x6c\x53\xa8\xee\xa1\xe5\x00\x2c\xae\x4f\x18\xe6\xd6\x98\xf2\x13\x49\xfc\x1f\xb2\x86\x9c\x08\x30\x8a\xe4\x77\x3e\xb2\x6a\xa5\x6c\x64\x55\xe8\x77\xd9\x16\xd7\x90\x21\x97\x1b\x47\xe2\xed\xb1\x64\xc8\xa9\xdd\x83\x46\x84\x42\x6e\xa0\xac\x73\x17\xc0\x50\x90\xb5\xdb\xdc\x86\x30\x03\xb5\x30\x8c\x7b\x3b\x9b\x5a\x09\xc8\x65\x89\xfa\x54\xf6\x3f\xea\xb0\x12\x2c\x17\xef\x0b\x3c\x51\x57\x74\xbd\x11\x28\x7c\xe3\xc9\xa1\x52\xd2\x60\x6e\x1d\x0e\x64\x45\x98\xd0\xd6\x63\xc6\x4a\xc2\x72\x71\xd2\x26\xbe\xb8\x3a\x18\xeb\x0d\xf5\x0b\xb1\xe6\x61\x7f\x19\xe8\xaa\xb3\x38\x86\xbf\x73\x99\x11\x0e\x6b\x1b\x25\x19\xb7\x55\x93\x84\x42\x5a\xb3\xf4\x2c\xa9\x0d\x31\xb5\x06\xb9\x74\xa3\x7e\x37\x76\xfd\x9a\x28\xeb\x75\x2c\x2b\x03\x69\x73\x95\x65\xc7\x34\xaa\x75\x73\x41\x67\x5f\x6d\xcf\x7c\x30\xdf\x79\x24\x85\x9f\x7f\x99\x3f\x6b\x54\xf9\x2b\x2e\x1d\x8c\x6c\x4c\x78\x33\x98\x82\x18\xc8\x15\x12\x83\x1a\x72\x2e\x75\xad\xbc\x86\xb6\xf1\x07\xab\x65\xcb\xa9\xe5\x6c\x27\x2a\x27\xad\x65\x32\x2e\x88\x2e\x26\xcd\x4d\x9c\x42\xe7\xc1\x6e\xae\x1d\x3f\xb3\x48\x1d\x5b\x06\x2c\x9d\xce\x81\x25\x2d\xdf\x88\xa3\x58\x99\x62\x0e\xec\xfc\xbc\x23\x3e\x63\x4b\x18\xb7\x14\x3f\xb3\x5f\x22\x73\x1f\x59\x29\x90\xa6\xd0\x97\xe6\x04\x36\x7c\x74\xc5\x59\x8e\x63\x76\x01\x97\x93\x79\x3b\x9b\x29\x24\x77\xed\x5b\xd3\x17\xfb\xff\xdc\xdf\xdd\xfc\xd0\x32\xce\xf8\x07\xb6\xf1\x5d\xb7\x06\x02\x2b\xa6\x0d\xd4\x8a\x43\x13\xf7\xde\x05\x9d\x43\x1c\x5d\xdf\x2a\x47\x58\x6d\x1e\x1a\x9c\xb5\x5b\xc8\xa5\xd0\x92\x63\xc4\xe5\x6a\x7c\x73\x7d\x33\x71\x83\x9e\x77\xa4\x51\xd0\xf1\xbf\xbf\xfb\xfe\xbb\x48\x1b\xc5\xc4\x8a\x2d\xb7\xe3\x87\x5a\xf1\x19\x3c\x1f\x07\xff\x52\x2b\x1e\x4c\x7e\x9e\xfe\x12\xad\x09\xaf\xf1\xc2\x81\x60\xe6\xfe\x1e\x89\xbe\x80\xe6\x71\x06\x87\x5a\xec\x26\x93\xf9\xe9\x6b\x8b\xde\x2d\x8b\x42\x8d\x66\x6c\x09\xbb\xdb\x85\xa1\xe1\x08\x94\x68\x0a\xe9\x62\x5d\x61\x2e\x85\xc0\xdc\x40\x5d\x49\xd1\xd8\x09\xb8\xd4\x7a\x8f\xce\x96\x22\x3d\x46\x4a\x43\x9f\xba\x6a\xe0\xbf\x30\x7b\x27\xf3\x3b\x34\xe3\xf1\x78\xc3\x04\x95\x9b\x88\x4b\x7f\x66\x47\x36\x9a\x65\x2e\x39\xa4\x69\x0a\x4d\x9a\x0e\x26\xf0\x0d\x04\x1b\x6d\x13\x76\x00\x33\xfb\x68\x9f\x26\x70\x0e\xc3\xe5\x85\x2d\x28\xce\x21\x88\x49\xc5\x82\x89\x8f\x91\xd6\xf0\x52\x94\xa8\x35\x59\x61\x5f\x41\x5c\xa3\x30\x1d\xf2\xec\x3e\x4a\xbd\x82\x14\x9c\x83\x2a\xa2\x34\x7a\x92\xc8\x36\xc7\x2d\x04\x2d\x90\x1d\x59\x9a\x82\xa8\x39\xdf\x23\xd7\x47\xca\xbc\xc5\xe4\x01\x79\xe4\x93\xd6\x57\x69\x0a\xb6\x55\xb4\x26\xa6\xfb\x95\xd6\xf9\xbe\xa7\x9d\x44\x36\xc1\xec\x57\x4c\xe6\x7d\x88\x1f\x70\x43\xfa\x7b\xec\x90\x0e\xf9\x21\x7d\x84\xa1\xbb\x42\x78\x8a\x9f\xbf\x72\xe8\xb1\x73\x03\x8f\x70\x13\x75\x99\xa1\x7a\x8a\x9d\xbf\x42\x68\xd8\x39\x53\xbf\x15\xa6\xb7\xf6\x02\x2e\x5f\x4d\x1e\xe1\x8e\x4a\xc9\x47\x99\x0b\x69\xb6\xe3\x07\x4e\xb6\xb6\x28\x83\x91\x91\xd5\x1b\xd7\xf2\x8f\x2e\x5c\xea\x9e\x41\xc7\xe1\xc2\x5d\xe5\xce\x60\xe4\xde\xec\x3c\x2b\xd1\xad\x7a\x39\x9d\x4e\x2f\xa0\xfd\xd5\xe3\x2f\xc4\x06\xa1\xaa\x71\xf7\x88\x3e\xba\xce\x73\x5b\x40\x7c\x8e\x46\x0d\x8f\x4e\xa7\xe6\xfd\x33\xb4\xea\x12\xc6\x81\x5a\xf0\xa7\x3f\xc1\xd1\xec\x21\x8c\xe3\x18\xfe\x93\xa8\x3b\x70\xd7\x7b\x0a\xd7\x4c\xd6\x7a\x9f\x7e\x4a\xa6\xb5\xcd\xc6\x44\x03\x95\x02\x9b\x35\x9f\x96\x0b\x8e\x74\x6c\xc8\x60\x01\xd3\xa1\x82\xf6\x38\xec\xe5\x8a\x13\x29\xa4\xc7\xf7\x30\x3b\xb4\x16\x39\x91\x7c\x58\x89\xf0\x55\x0a\x41\xd0\x5f\x7c\x44\x61\x09\x3a\x66\x67\x1a\xcd\x7b\xef\x8b\x71\x93\x32\x4f\x25\xb4\xc9\x05\x5c\x4f\xa7\xd3\xc9\x91\x12\xbb\xbd\x79\x5f\x57\xb6\xce\x02\x22\xb6\xee\x48\xec\x6c\xeb\x2a\x50\x5b\x33\xd9\x23\x8d\x43\x2e\x39\xf7\xc5\x4d\xb3\xd4\x1a\xd8\xb6\x27\x52\x40\x0a\xe1\xe5\xfc\x44\x6a\xed\x59\xb2\xb7\xb5\xa1\x7b\x4e\xd8\x7e\xe8\xa2\x43\x9b\x0d\x88\xc3\xcb\x03\xa7\x1c\xf8\xeb\xb4\x63\xce\x3a\xbd\xd9\xde\xa2\x03\x77\xed\xfd\x35\xb4\x59\x4f\x7f\xcf\xe7\xfc\xf2\x23\xb7\xd1\x4d\x57\xb5\x2e\xc6\x03\x45\x27\xf3\x63\xdf\xbc\x35\xa8\x6c\xb9\x2d\x6d\xca\xb2\xbe\xb0\x3d\x85\xc2\x23\x97\xb8\x9a\x5f\x61\xa8\x50\x50\x54\x6d\x9d\xe1\x5b\x04\x5b\x15\x1e\xb8\xcc\xb7\xad\x7d\x38\x7d\x62\xc0\xb8\x3a\x4d\x0a\x04\x00\x18\x04\x81\x03\xea\x01\x52\x2d\x31\x72\x52\x69\xa4\x90\x82\xff\x11\x7a\x3c\x89\x6a\xc1\xee\xc7\x93\xb0\x79\x1f\xf2\x68\xe7\x9b\xb4\xe9\xeb\x18\xa7\xf6\x79\x0a\x41\x62\x14\x30\x9a\x8e\x02\x38\x3f\x15\x82\x36\xeb\x8e\x16\x7b\x0d\xfa\x4b\x01\x12\x43\x17\xee\x2e\xd2\x37\x7e\xff\x0c\x32\x92\xdf\xad\x5c\x47\x35\xb3\xf5\xd7\xf8\x88\x2d\x59\x13\x43\x94\xe3\x3a\x99\xc3\x9e\xbc\xe9\x3c\x73\xeb\x9c\x39\xf8\x16\xd7\x5d\x7d\x42\xf7\x8b\x81\x7b\xcb\xa4\xa2\xa8\x42\x45\x28\xab\xf5\x0c\x6e\xaa\xfb\xf9\x3f\xdb\x5f\x54\xdc\x25\xed\x93\xaa\x56\x0a\x17\x47\x1a\xe5\xb9\xfb\x4d\xec\x1c\x82\x24\xb6\x04\xbf\xc7\xa6\xdb\x6c\xff\xc7\x6f\x38\x71\x15\x0d\xdd\x4f\xd3\xcd\x78\xc9\x28\xe5\x68\x15\xde\xb3\xb7\xc1\x68\xfd\xdf\x0f\xa9\x43\x91\xd0\xdc\x41\xef\xd7\xec\x00\xb9\xc6\x27\x16\x74\xd7\xd9\x23\x0b\x80\xd0\x6e\x99\x39\x9b\x37\x5d\xbb\x1b\x56\x23\x67\x8b\xe6\x53\x06\x5a\x2b\x57\x6b\x8d\xc3\x06\x60\x17\x30\xd2\xb6\xf6\xa3\x7a\x34\x89\x8a\xba\x24\x82\xfd\x86\x63\x9b\x97\x26\xde\x56\xee\x7e\x3c\x38\x3e\x92\x8f\x94\xd9\x5f\x56\x8f\xda\x1c\x37\x6a\x8c\x38\x6a\xbd\x7b\xb3\xbf\x24\x98\xc1\x74\x3e\xfa\x44\x0b\x9d\x96\x12\x66\x44\x41\xff\x25\x6c\x93\x2f\x28\x69\xa5\xb7\x73\x19\x51\x23\x7f\x35\xe2\xea\x73\x21\x37\xe9\xe8\x7a\xda\x29\xe9\x1d\xed\xfc\x3c\x6a\xb0\x76\xe4\x0c\xab\x65\x1b\x9a\x0b\xb8\x9e\x7e\x09\x6d\xfd\xb5\xca\x60\x07\x46\xb1\x0a\x29\x90\xdc\xb0\x35\xfe\x1f\x6c\xe4\x0b\x18\xf9\x93\x55\xb4\x38\x6c\x8d\xe7\x60\x7a\xa0\xaf\x9d\xed\x6c\xfb\xb5\x8d\x37\x88\x9d\x85\xcf\x21\x38\xb9\x91\x47\x91\x38\x20\x1c\x84\xf6\xe3\x71\xef\x7e\xf0\x09\x86\x39\xc5\x56\xbb\xdd\x6f\x95\x93\xa8\x30\x25\x1f\x07\x89\x71\x1f\xa9\x58\x9d\x3b\x0e\x8e\x81\x1f\x3e\x2c\xe9\x76\x87\x8d\x8c\x6d\xea\x71\xd0\x67\x41\xaf\x38\xe9\x7a\xb1\xb6\x12\x81\xdd\xfe\x5b\x9e\x38\x86\x77\x86\x28\x03\x04\x7e\x7a\x0b\x75\x45\x89\xb1\xd9\x4b\x82\xcd\x8f\x2e\x8b\x75\x1f\xfb\x64\x44\x69\x58\x4a\xb5\x21\x8a\x36\x17\x3a\xa6\xc0\x2d\x10\x85\x5d\xe9\xa7\xd1\xbc\xb5\xa7\xd8\x9a\xf0\xf1\x51\xdf\xf7\x7c\x3c\x8a\xfa\x2e\x1f\x4d\x22\x24\x79\x71\x4c\xe8\x32\x56\x27\x37\x85\xef\x5c\x0b\x30\x7e\x3e\x36\x05\xd3\x93\x88\x18\xa3\xc6\xa3\x03\x30\x8c\x26\xd6\xaf\x97\xbd\x96\xac\x5b\x9e\x1c\x84\xd5\x53\x3c\xf6\xc5\x74\x57\x08\xb4\xe4\xb9\xd6\x63\x8f\xab\xd1\x45\x8f\xf7\x21\xac\x46\x2f\x46\x9d\xa3\xf6\xe1\xbd\xdf\x47\x7a\x52\x93\x03\xd6\x23\x1b\x65\xa3\x23\xf1\x84\xd2\x37\x36\x7e\xc6\xc1\x89\x48\x1f\xa2\x63\xd2\x19\xdb\x9f\xd7\x4f\x5a\xd9\x7f\x25\xf1\x88\x89\x19\x1d\x4d\x22\x5d\x67\xfe\x6e\x62\xfc\xb2\x6b\xc0\x5a\x32\x07\xde\x61\x2a\x38\x2a\x28\xac\x88\xc3\xa2\x22\x1c\x14\x21\x4f\x64\x8d\x46\xa4\xdf\xd5\xee\xc2\x1a\x7c\x3a\xe9\xee\xbb\xbe\xd5\xb6\xb8\xf2\xbf\x2d\x6c\x30\xd3\xee\x26\x01\x1a\xbc\xbb\x2b\x1e\x7f\x95\xf3\xfa\x87\xb7\xbd\xeb\x9c\x2e\x22\xc6\x8e\x7b\xf7\x1d\xde\xa9\x7b\x92\x93\x1f\xfe\x6d\x36\x9b\x68\x25\xe5\x8a\xfb\x4f\xfe\xba\x8b\x94\x98\x54\x2c\xfa\xa0\x03\x20\x7a\x2b\x72\xa0\xb8\x44\xb5\xe8\xb1\x6f\x6e\x57\x92\xd8\x7f\x92\x96\xc4\xfe\xab\xdb\xff\x0d\x00\x00\xff\xff\x60\x34\x13\x5f\x86\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 11142, mode: os.FileMode(420), modTime: time.Unix(1590029984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
